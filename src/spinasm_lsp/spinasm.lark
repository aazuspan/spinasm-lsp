program: (instruction | assignment | label)*

instruction: OPCODE [args] NEWLINE
args: expr (","+ expr)*
expr: value (OPERATOR value)*
value: [NEGATIVE] (NAME | HEX_NUM | DEC_NUM | BIT_VECTOR)

assignment: (equ | mem) NEWLINE
equ: IDENT "EQU"i expr | "EQU"i IDENT expr
mem: IDENT "MEM"i expr | "MEM"i IDENT expr

label: IDENT ":"


OPCODE.1: "ABSA"i
    | "AND"i
    | "CHO"i
    | "CLR"i
    | "EXP"i
    | "JAM"i
    | "LDAX"i
    | "LOG"i
    | "MAXX"i
    | "MULX"i
    | "NOT"i
    | "OR"i
    | "RDA"i
    | "RDAX"i
    | "RDFX"i
    | "RMPA"i
    | "SKP"i
    | "SOF"i
    | "WLDR"i
    | "WLDS"i
    | "WRA"i
    | "WRAP"i
    | "WRAX"i
    | "WRHX"i
    | "WRLX"i
    | "XOR"i

// NAME can be suffixed with ^ or # to modify memory addressing
NAME: IDENT [ADDR_MODIFIER]
ADDR_MODIFIER: ["^" | "#"]
NEGATIVE: "-"
COMMENT: ";" /[^\n]/*
OPERATOR: "+" | "-" | "*" | "/" | "|" | "&"
HEX_NUM.1: "0x"i HEXDIGIT+ | "$" HEXDIGIT+
BIT_VECTOR: "%" /[01](_?[01])*/

%import common.WS_INLINE
%import common.WS
%import common.NEWLINE
%import common.HEXDIGIT
%import common.CNAME        -> IDENT
%import common.NUMBER       -> DEC_NUM

%ignore WS
%ignore WS_INLINE
%ignore COMMENT
